 Olá, meu nome é Danilo, sou programador Backend e hoje vamos falar um pouco sobre Golang. Antes de mais nada, se inscreva no nosso canal para receber nosso conteúdo semanal. Você sabe o que é Backend? Backend é a parte de trás do código, a parte que conhece sobre você, a parte que salva uma curtida, uma preferência ou te envia uma notificação. Além disso, essas informações são processadas no Backend. E devolvida para um site ou aplicativo mostrar as informações na tela. Essa ponte é feita por meio de APIs, Application Program Interface, que faz a interface entre o aplicativo e o Backend. Geralmente, o Backend se comunica com a sua aplicação por protocolos HTTP, onde seu aplicativo faz uma pergunta e recebe uma resposta do Backend. Como, por exemplo, o Instagram pergunta para o Backend qual feed devo mostrar para o usuário. O que define um Backend? À medida que seu site cresce, mais informações precisam ser criadas para o usuário. E, por isso, o Backend precisa ser rápido, para aguentar altas demandas, escalável, para poder crescer de uma forma eficiente, e modular, porque você pode trocar peças sem quebrar outras. Além de não criar uma granularidade muito grande, para não ser difícil você dar uma manutenção para o seu código. Quando trabalhamos com software, devemos nos preocupar com memória RAM, CPU e armazenamento. Porém, um código de Backend otimizado pode economizar custos e aumentar a sua qualidade de trabalho. Por isso, o Backend precisa ser rápido, para aguentar altas demandas, e permitir que seus usuários façam seus negócios. E se você for um usuário que quer um software mais rápido, você deve ter uma aplicação de software mais rápida. O Backend é um software que, como o Google diz, é um software que é muito bom para você, porque ele pode aumentar a velocidade de resposta entre o Backend e sua aplicação. E por que Golang? Golang, mais conhecido como Go, é uma linguagem open source criada pelo Google. Ela é muito simples de entender e muito poderosa. Tanto um programador iniciante quanto um programador avançado, consegue pegar seus conceitos muito rápido. Ou seja, o código é convertido para um formato que seu processador entenda. E não precisa de outras dependências, como o Java, por exemplo, que precisa da JVM para ser executado. Além de ser Closed Platform, a gente pode compilar ele tanto para Windows, Mac ou Linux. Ele foi projetado para encorajar boas práticas de código, pelo seu ecossistema de pacotes, dando assim mais modularização à sua aplicação. Pacotes são pastas dentro do diretório de trabalho. Dentro delas, podem encontrar arquivos Go ou outros pacotes. Se você precisa de mais confiança na sua aplicação, Go tem um curioso padrão de tratamento de erros, onde todos os erros precisam ser tratados pelo usuário, assim evitando erros genéricos da sua aplicação. Diferente de outras linguagens, como C e C++, Go possui seu próprio gerenciamento de memória, com garbage collector. Assim, é muito mais fácil programar e desenvolver em Go sem você ter que ir alocar e desalocar variáveis na mão. Go também possui uma ótima utilização de código, pois caso alguma variável não seja utilizada ou alguma importação de biblioteca, seu código não copilará, até você remover a variável. Bom, se você gostou do conteúdo, inscreva-se aqui no canal e nas nossas redes sociais. Até logo!